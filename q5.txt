approach 1
    doubleL(n) is called within the for loop with 5 as the value passed into the parameter
    inside of doubleL
        res is initialized with an empty list
        then a for loop goes from i = 0 to i = 4
            for each iteration the loop appends i * 2 to the res list
                at the end res will be [0, 2, 4, 6, 8]
                res is returned and the doubleL function exits

    the outside loop becomes 
    for i in [0, 2, 4, 6, 8]
        print(i end=' : ')
    
    which prints the number and then " : " on loop until the end of the list

    output is

    0 : 2 : 4 : 6 : 8 : 

approach 2
    this approach uses list comprehension to generate a list containing elements by multiplying each number from 0 to 4 by 2

    it iterates through each element in the new list and prints the element followed by " : "
    output is:

    0 : 2 : 4 : 6 : 8 : 

approach 3
    this approach defines a function that takes an argument 'n'. the for loop inside the function iterates through the numbers in the range from 0 to 4
    each value is yielded after being multiplied by 2
    each value that is generated by doubleG(n) is printed followed by " : " on the same line
    the output is

    0 : 2 : 4 : 6 : 8 : 